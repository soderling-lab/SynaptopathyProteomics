
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning messages:
1: Setting LC_CTYPE failed, using "C" 
2: Setting LC_COLLATE failed, using "C" 
3: Setting LC_TIME failed, using "C" 
4: Setting LC_MESSAGES failed, using "C" 
5: Setting LC_MONETARY failed, using "C" 
6: Setting LC_PAPER failed, using "C" 
7: Setting LC_MEASUREMENT failed, using "C" 
> #!/usr/bin/env Rscript
> # Examine module self-preservation.
> 
> #-------------------------------------------------------------------------------
> ## Set-up the workspace.
> #-------------------------------------------------------------------------------
> 
> # Export taskID.
> taskID <- as.integer(Sys.getenv('SLURM_ARRAY_TASK_ID'))
> message(paste("SLURM_ARRAY_TASK_ID:",taskID))
SLURM_ARRAY_TASK_ID: NA
> 
> # Global options and imports.
> suppressPackageStartupMessages({
+   library(dplyr)
+   library(data.table)
+   library(NetRep)
+ })
> 
> # Directories.
> here <- getwd()
> root <- dirname(dirname(here))
> datadir <- file.path(root, "data")
> funcdir <- file.path(root, "R")
> 
> # Functions.
> myfun <- list.files(funcdir, pattern = "silently.R", full.names = TRUE)
> invisible(sapply(myfun, source))
> 
> # Load expression data. Transpose -> rows = samples; columns = genes.
> wtDat <- t(readRDS(file.path(datadir, "3_WT_cleanDat.RData")))
> koDat <- t(readRDS(file.path(datadir, "3_KO_cleanDat.RData")))
> 
> # Compute adjmatrix:
> wtAdjm <- silently(WGCNA::bicor(wtDat))

> koAdjm <- silently(WGCNA::bicor(koDat))
> 
> # Load partitions.
> myfiles <- list.files(datadir,pattern="*partitions.csv",full.names=TRUE)
> koParts <- data.table::fread(myfiles[1], drop=1,skip = 1)
> wtParts <- data.table::fread(myfiles[2], drop=1,skip = 1)
> colnames(koParts) <- colnames(wtParts) <- colnames(wtAdjm)
> 
> #-------------------------------------------------------------------------------
> ## Permutation testing.
> #-------------------------------------------------------------------------------
> 
> # Input for NetRep:
> data_list <- list(wt = wtDat, ko = koDat)
> correlation_list <- list(wt = wtAdjm, ko = koAdjm)
> network_list <- list(wt = wtAdjm, ko = koAdjm)
> 
> # Loop through partitions, evaluating self-preservation.
> n <- dim(koParts)[1]
> n <- 1
> results <- list()
> 
> for (i in 1:n) {
+   # status
+   message(paste("working on partition", i, "..."))
+   # Get partition.
+   wtPartition <- as.integer(wtParts[i, ]) + 1
+   koPartition <- as.integer(koParts[i, ]) + 1
+   names(wtPartition) <- names(koPartition) <- colnames(wtAdjm)
+   module_list <- list(wt = wtPartition, ko = koPartition)
+   # Perform permutation test for module self-preservation.
+   # Done for both wt and ko networks...
+   self <- as.list(c("wt", "ko"))
+   selfPreservation <- lapply(self, function(x) {
+     NetRep::modulePreservation(
+       network = network_list,
+       data = data_list,
+       correlation = correlation_list,
+       moduleAssignments = module_list,
+       modules = NULL,
+       backgroundLabel = 0,
+       discovery = x,
+       test = x,
+       selfPreservation = TRUE,
+       nThreads = 8,
+       # nPerm = 100000,
+       null = "overlap",
+       alternative = "greater",
+       simplify = TRUE,
+       verbose = FALSE
+     )
+   })
+   # Function to get max pvalue.
+   maxp <- function(preservation) {
+     p <- apply(preservation$p.values, 1, function(x) max(x, na.rm = TRUE))
+     q <- p.adjust(p, "bonferroni")
+     return(q)
+   }
+   q <- lapply(selfPreservation, maxp)
+   # Modules with NS preservation stats.
+   out <- lapply(q, function(x) names(x)[x > 0.05])
+   # For NS modules, set module membership to 0.
+   wtPartition[wtPartition %in% out[[1]]] <- 0
+   koPartition[koPartition %in% out[[2]]] <- 0
+   # Return results.
+   results[[i]] <- list(wt = wtPartition, ko = koPartition)
+ } # END LOOP.
working on partition 1 ...

Warning in permutationTest(nulls, observed, varsPres, totalSize, alternative) :
  Missing values encountered in the observed test statistics and/or in their null distributions. P-values may be biased for these tests. See 'help("permutationTest")'

Execution halted
